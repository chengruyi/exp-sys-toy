<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: experiment.proto
//   Date: 2015-11-10 09:25:05

namespace ppzc\experiment\Parameter {

  class Type extends \DrSlump\Protobuf\Enum {
    const BOOL = 0;
    const INT = 1;
    const DOUBLE = 2;
    const STRING = 3;
  }
}
namespace ppzc\experiment {

  class Parameter extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $value = null;
    
    /**  @var int - \ppzc\experiment\Parameter\Type */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ppzc.experiment.Parameter');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ppzc\experiment\Parameter\Type';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ppzc\experiment\Parameter
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ppzc\experiment\Parameter
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \ppzc\experiment\Parameter
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \ppzc\experiment\Parameter
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \ppzc\experiment\Parameter
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \ppzc\experiment\Parameter\Type
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \ppzc\experiment\Parameter\Type $value
     * @return \ppzc\experiment\Parameter
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace ppzc\experiment\Diversion {

  class Type extends \DrSlump\Protobuf\Enum {
    const RANDOM = 0;
    const UUID = 1;
    const USER = 2;
    const COOKIE = 3;
  }
}
namespace ppzc\experiment {

  class Diversion extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int - \ppzc\experiment\Diversion\Type */
    public $type = null;
    
    /**  @var int */
    public $num_buckets = 10000;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ppzc.experiment.Diversion');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ppzc\experiment\Diversion\Type';
      $descriptor->addField($f);

      // OPTIONAL INT32 num_buckets = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "num_buckets";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 10000;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \ppzc\experiment\Diversion
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Diversion
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ppzc\experiment\Diversion
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ppzc\experiment\Diversion
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \ppzc\experiment\Diversion
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \ppzc\experiment\Diversion\Type
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \ppzc\experiment\Diversion\Type $value
     * @return \ppzc\experiment\Diversion
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <num_buckets> has a value
     *
     * @return boolean
     */
    public function hasNumBuckets(){
      return $this->_has(4);
    }
    
    /**
     * Clear <num_buckets> value
     *
     * @return \ppzc\experiment\Diversion
     */
    public function clearNumBuckets(){
      return $this->_clear(4);
    }
    
    /**
     * Get <num_buckets> value
     *
     * @return int
     */
    public function getNumBuckets(){
      return $this->_get(4);
    }
    
    /**
     * Set <num_buckets> value
     *
     * @param int $value
     * @return \ppzc\experiment\Diversion
     */
    public function setNumBuckets( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace ppzc\experiment {

  class Condition extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string[]  */
    public $args = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ppzc.experiment.Condition');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING args = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "args";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \ppzc\experiment\Condition
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Condition
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ppzc\experiment\Condition
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ppzc\experiment\Condition
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <args> has a value
     *
     * @return boolean
     */
    public function hasArgs(){
      return $this->_has(3);
    }
    
    /**
     * Clear <args> value
     *
     * @return \ppzc\experiment\Condition
     */
    public function clearArgs(){
      return $this->_clear(3);
    }
    
    /**
     * Get <args> value
     *
     * @param int $idx
     * @return string
     */
    public function getArgs($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <args> value
     *
     * @param string $value
     * @return \ppzc\experiment\Condition
     */
    public function setArgs( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <args>
     *
     * @return string[]
     */
    public function getArgsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <args>
     *
     * @param string $value
     * @return \ppzc\experiment\Condition
     */
    public function addArgs( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace ppzc\experiment {

  class BucketRange extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $start = null;
    
    /**  @var int */
    public $end = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ppzc.experiment.BucketRange');

      // REQUIRED INT32 start = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 end = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "end";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start> value
     *
     * @return \ppzc\experiment\BucketRange
     */
    public function clearStart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(1);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \ppzc\experiment\BucketRange
     */
    public function setStart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(2);
    }
    
    /**
     * Clear <end> value
     *
     * @return \ppzc\experiment\BucketRange
     */
    public function clearEnd(){
      return $this->_clear(2);
    }
    
    /**
     * Get <end> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(2);
    }
    
    /**
     * Set <end> value
     *
     * @param int $value
     * @return \ppzc\experiment\BucketRange
     */
    public function setEnd( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ppzc\experiment {

  class Layer extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $domain_id = 0;
    
    /**  @var boolean */
    public $launch = true;
    
    /**  @var int */
    public $unbiased_id = null;
    
    /**  @var int */
    public $fixed_biased_id = 0;
    
    /**  @var int */
    public $random_biased_id = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ppzc.experiment.Layer');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 domain_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "domain_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL launch = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "launch";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL INT32 unbiased_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "unbiased_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fixed_biased_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "fixed_biased_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 random_biased_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "random_biased_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \ppzc\experiment\Layer
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Layer
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ppzc\experiment\Layer
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ppzc\experiment\Layer
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <domain_id> has a value
     *
     * @return boolean
     */
    public function hasDomainId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <domain_id> value
     *
     * @return \ppzc\experiment\Layer
     */
    public function clearDomainId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <domain_id> value
     *
     * @return int
     */
    public function getDomainId(){
      return $this->_get(3);
    }
    
    /**
     * Set <domain_id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Layer
     */
    public function setDomainId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <launch> has a value
     *
     * @return boolean
     */
    public function hasLaunch(){
      return $this->_has(4);
    }
    
    /**
     * Clear <launch> value
     *
     * @return \ppzc\experiment\Layer
     */
    public function clearLaunch(){
      return $this->_clear(4);
    }
    
    /**
     * Get <launch> value
     *
     * @return boolean
     */
    public function getLaunch(){
      return $this->_get(4);
    }
    
    /**
     * Set <launch> value
     *
     * @param boolean $value
     * @return \ppzc\experiment\Layer
     */
    public function setLaunch( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <unbiased_id> has a value
     *
     * @return boolean
     */
    public function hasUnbiasedId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <unbiased_id> value
     *
     * @return \ppzc\experiment\Layer
     */
    public function clearUnbiasedId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <unbiased_id> value
     *
     * @return int
     */
    public function getUnbiasedId(){
      return $this->_get(5);
    }
    
    /**
     * Set <unbiased_id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Layer
     */
    public function setUnbiasedId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <fixed_biased_id> has a value
     *
     * @return boolean
     */
    public function hasFixedBiasedId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <fixed_biased_id> value
     *
     * @return \ppzc\experiment\Layer
     */
    public function clearFixedBiasedId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <fixed_biased_id> value
     *
     * @return int
     */
    public function getFixedBiasedId(){
      return $this->_get(6);
    }
    
    /**
     * Set <fixed_biased_id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Layer
     */
    public function setFixedBiasedId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <random_biased_id> has a value
     *
     * @return boolean
     */
    public function hasRandomBiasedId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <random_biased_id> value
     *
     * @return \ppzc\experiment\Layer
     */
    public function clearRandomBiasedId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <random_biased_id> value
     *
     * @return int
     */
    public function getRandomBiasedId(){
      return $this->_get(7);
    }
    
    /**
     * Set <random_biased_id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Layer
     */
    public function setRandomBiasedId( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace ppzc\experiment {

  class Domain extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var \ppzc\experiment\BucketRange[]  */
    public $ranges = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ppzc.experiment.Domain');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE ranges = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ranges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ppzc\experiment\BucketRange';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \ppzc\experiment\Domain
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Domain
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ppzc\experiment\Domain
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ppzc\experiment\Domain
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ranges> has a value
     *
     * @return boolean
     */
    public function hasRanges(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ranges> value
     *
     * @return \ppzc\experiment\Domain
     */
    public function clearRanges(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ranges> value
     *
     * @param int $idx
     * @return \ppzc\experiment\BucketRange
     */
    public function getRanges($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <ranges> value
     *
     * @param \ppzc\experiment\BucketRange $value
     * @return \ppzc\experiment\Domain
     */
    public function setRanges(\ppzc\experiment\BucketRange $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <ranges>
     *
     * @return \ppzc\experiment\BucketRange[]
     */
    public function getRangesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <ranges>
     *
     * @param \ppzc\experiment\BucketRange $value
     * @return \ppzc\experiment\Domain
     */
    public function addRanges(\ppzc\experiment\BucketRange $value){
     return $this->_add(3, $value);
    }
  }
}

namespace ppzc\experiment {

  class Experiment extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $layer_id = null;
    
    /**  @var int */
    public $control_id = null;
    
    /**  @var int */
    public $diversion_id = null;
    
    /**  @var \ppzc\experiment\Parameter[]  */
    public $parameters = array();
    
    /**  @var \ppzc\experiment\Condition[]  */
    public $conditions = array();
    
    /**  @var int[]  */
    public $buckets = array();
    
    /**  @var \ppzc\experiment\BucketRange[]  */
    public $ranges = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ppzc.experiment.Experiment');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 layer_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "layer_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 control_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "control_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 diversion_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "diversion_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE parameters = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "parameters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ppzc\experiment\Parameter';
      $descriptor->addField($f);

      // REPEATED MESSAGE conditions = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "conditions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ppzc\experiment\Condition';
      $descriptor->addField($f);

      // REPEATED INT32 buckets = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "buckets";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE ranges = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "ranges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ppzc\experiment\BucketRange';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \ppzc\experiment\Experiment
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Experiment
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ppzc\experiment\Experiment
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ppzc\experiment\Experiment
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <layer_id> has a value
     *
     * @return boolean
     */
    public function hasLayerId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <layer_id> value
     *
     * @return \ppzc\experiment\Experiment
     */
    public function clearLayerId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <layer_id> value
     *
     * @return int
     */
    public function getLayerId(){
      return $this->_get(3);
    }
    
    /**
     * Set <layer_id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Experiment
     */
    public function setLayerId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <control_id> has a value
     *
     * @return boolean
     */
    public function hasControlId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <control_id> value
     *
     * @return \ppzc\experiment\Experiment
     */
    public function clearControlId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <control_id> value
     *
     * @return int
     */
    public function getControlId(){
      return $this->_get(4);
    }
    
    /**
     * Set <control_id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Experiment
     */
    public function setControlId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <diversion_id> has a value
     *
     * @return boolean
     */
    public function hasDiversionId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <diversion_id> value
     *
     * @return \ppzc\experiment\Experiment
     */
    public function clearDiversionId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <diversion_id> value
     *
     * @return int
     */
    public function getDiversionId(){
      return $this->_get(5);
    }
    
    /**
     * Set <diversion_id> value
     *
     * @param int $value
     * @return \ppzc\experiment\Experiment
     */
    public function setDiversionId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <parameters> has a value
     *
     * @return boolean
     */
    public function hasParameters(){
      return $this->_has(6);
    }
    
    /**
     * Clear <parameters> value
     *
     * @return \ppzc\experiment\Experiment
     */
    public function clearParameters(){
      return $this->_clear(6);
    }
    
    /**
     * Get <parameters> value
     *
     * @param int $idx
     * @return \ppzc\experiment\Parameter
     */
    public function getParameters($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <parameters> value
     *
     * @param \ppzc\experiment\Parameter $value
     * @return \ppzc\experiment\Experiment
     */
    public function setParameters(\ppzc\experiment\Parameter $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <parameters>
     *
     * @return \ppzc\experiment\Parameter[]
     */
    public function getParametersList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <parameters>
     *
     * @param \ppzc\experiment\Parameter $value
     * @return \ppzc\experiment\Experiment
     */
    public function addParameters(\ppzc\experiment\Parameter $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <conditions> has a value
     *
     * @return boolean
     */
    public function hasConditions(){
      return $this->_has(7);
    }
    
    /**
     * Clear <conditions> value
     *
     * @return \ppzc\experiment\Experiment
     */
    public function clearConditions(){
      return $this->_clear(7);
    }
    
    /**
     * Get <conditions> value
     *
     * @param int $idx
     * @return \ppzc\experiment\Condition
     */
    public function getConditions($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <conditions> value
     *
     * @param \ppzc\experiment\Condition $value
     * @return \ppzc\experiment\Experiment
     */
    public function setConditions(\ppzc\experiment\Condition $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <conditions>
     *
     * @return \ppzc\experiment\Condition[]
     */
    public function getConditionsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <conditions>
     *
     * @param \ppzc\experiment\Condition $value
     * @return \ppzc\experiment\Experiment
     */
    public function addConditions(\ppzc\experiment\Condition $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <buckets> has a value
     *
     * @return boolean
     */
    public function hasBuckets(){
      return $this->_has(10);
    }
    
    /**
     * Clear <buckets> value
     *
     * @return \ppzc\experiment\Experiment
     */
    public function clearBuckets(){
      return $this->_clear(10);
    }
    
    /**
     * Get <buckets> value
     *
     * @param int $idx
     * @return int
     */
    public function getBuckets($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <buckets> value
     *
     * @param int $value
     * @return \ppzc\experiment\Experiment
     */
    public function setBuckets( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <buckets>
     *
     * @return int[]
     */
    public function getBucketsList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <buckets>
     *
     * @param int $value
     * @return \ppzc\experiment\Experiment
     */
    public function addBuckets( $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <ranges> has a value
     *
     * @return boolean
     */
    public function hasRanges(){
      return $this->_has(11);
    }
    
    /**
     * Clear <ranges> value
     *
     * @return \ppzc\experiment\Experiment
     */
    public function clearRanges(){
      return $this->_clear(11);
    }
    
    /**
     * Get <ranges> value
     *
     * @param int $idx
     * @return \ppzc\experiment\BucketRange
     */
    public function getRanges($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <ranges> value
     *
     * @param \ppzc\experiment\BucketRange $value
     * @return \ppzc\experiment\Experiment
     */
    public function setRanges(\ppzc\experiment\BucketRange $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <ranges>
     *
     * @return \ppzc\experiment\BucketRange[]
     */
    public function getRangesList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <ranges>
     *
     * @param \ppzc\experiment\BucketRange $value
     * @return \ppzc\experiment\Experiment
     */
    public function addRanges(\ppzc\experiment\BucketRange $value){
     return $this->_add(11, $value);
    }
  }
}

namespace ppzc\experiment {

  class Deployment extends \DrSlump\Protobuf\Message {

    /**  @var \ppzc\experiment\Diversion[]  */
    public $diversions = array();
    
    /**  @var \ppzc\experiment\Layer[]  */
    public $layers = array();
    
    /**  @var \ppzc\experiment\Experiment[]  */
    public $experiments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ppzc.experiment.Deployment');

      // REPEATED MESSAGE diversions = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "diversions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ppzc\experiment\Diversion';
      $descriptor->addField($f);

      // REPEATED MESSAGE layers = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "layers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ppzc\experiment\Layer';
      $descriptor->addField($f);

      // REPEATED MESSAGE experiments = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "experiments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ppzc\experiment\Experiment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <diversions> has a value
     *
     * @return boolean
     */
    public function hasDiversions(){
      return $this->_has(1);
    }
    
    /**
     * Clear <diversions> value
     *
     * @return \ppzc\experiment\Deployment
     */
    public function clearDiversions(){
      return $this->_clear(1);
    }
    
    /**
     * Get <diversions> value
     *
     * @param int $idx
     * @return \ppzc\experiment\Diversion
     */
    public function getDiversions($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <diversions> value
     *
     * @param \ppzc\experiment\Diversion $value
     * @return \ppzc\experiment\Deployment
     */
    public function setDiversions(\ppzc\experiment\Diversion $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <diversions>
     *
     * @return \ppzc\experiment\Diversion[]
     */
    public function getDiversionsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <diversions>
     *
     * @param \ppzc\experiment\Diversion $value
     * @return \ppzc\experiment\Deployment
     */
    public function addDiversions(\ppzc\experiment\Diversion $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <layers> has a value
     *
     * @return boolean
     */
    public function hasLayers(){
      return $this->_has(2);
    }
    
    /**
     * Clear <layers> value
     *
     * @return \ppzc\experiment\Deployment
     */
    public function clearLayers(){
      return $this->_clear(2);
    }
    
    /**
     * Get <layers> value
     *
     * @param int $idx
     * @return \ppzc\experiment\Layer
     */
    public function getLayers($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <layers> value
     *
     * @param \ppzc\experiment\Layer $value
     * @return \ppzc\experiment\Deployment
     */
    public function setLayers(\ppzc\experiment\Layer $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <layers>
     *
     * @return \ppzc\experiment\Layer[]
     */
    public function getLayersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <layers>
     *
     * @param \ppzc\experiment\Layer $value
     * @return \ppzc\experiment\Deployment
     */
    public function addLayers(\ppzc\experiment\Layer $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <experiments> has a value
     *
     * @return boolean
     */
    public function hasExperiments(){
      return $this->_has(3);
    }
    
    /**
     * Clear <experiments> value
     *
     * @return \ppzc\experiment\Deployment
     */
    public function clearExperiments(){
      return $this->_clear(3);
    }
    
    /**
     * Get <experiments> value
     *
     * @param int $idx
     * @return \ppzc\experiment\Experiment
     */
    public function getExperiments($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <experiments> value
     *
     * @param \ppzc\experiment\Experiment $value
     * @return \ppzc\experiment\Deployment
     */
    public function setExperiments(\ppzc\experiment\Experiment $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <experiments>
     *
     * @return \ppzc\experiment\Experiment[]
     */
    public function getExperimentsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <experiments>
     *
     * @param \ppzc\experiment\Experiment $value
     * @return \ppzc\experiment\Deployment
     */
    public function addExperiments(\ppzc\experiment\Experiment $value){
     return $this->_add(3, $value);
    }
  }
}

